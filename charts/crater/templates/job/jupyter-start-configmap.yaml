apiVersion: v1
kind: ConfigMap
metadata:
  name: jupyter-start-configmap
  namespace: {{ .Values.namespaces.job }}
data:
  start.sh: |
    #!/bin/bash
    set -e
    # Determine whether the user already exists
    if id "${NB_USER}" &>/dev/null; then
        echo "User ${NB_USER} already exists, will not recreate"
    else
        # Add user
        groupadd --force --gid "${NB_GID}" --non-unique "${NB_GROUP:-${NB_USER}}"
        useradd --no-log-init --home "/home/${NB_USER}" --shell /bin/bash --uid "${NB_UID}" --gid "${NB_GID}" --groups 100 "${NB_USER}"
    fi
    # Ensuring home dir is owned by user
    if [ ! -d "/home/${NB_USER}" ]; then
        mkdir -p "/home/${NB_USER}"
    fi
    chown "${NB_UID}:${NB_GID}" "/home/${NB_USER}"
    # Granting user passwordless sudo rights
    if [ ! -d "/etc/sudoers.d" ]; then
        mkdir -p "/etc/sudoers.d"
    fi
    if [ ! -f "/etc/sudoers.d/added-by-start-script" ]; then
        touch /etc/sudoers.d/added-by-start-script
    fi
    echo "${NB_USER} ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers.d/added-by-start-script
    # Start ssh service
    if command -v service >/dev/null 2>&1; then
        if service --status-all 2>&1 | grep -q 'ssh'; then
            service ssh restart
        fi
    fi
    # Set PYTHONUSERBASE
    if [ -z "${PYTHONUSERBASE}" ]; then
        if ! command -v conda >/dev/null 2>&1; then
            PYTHONUSERBASE=/usr/local
        fi
    fi
    # Run hooks
    source /usr/local/bin/run-hooks.sh /usr/local/bin/before-notebook.d || true
    exec sudo --preserve-env --set-home --user "${NB_USER}" LD_LIBRARY_PATH="${LD_LIBRARY_PATH}" PATH="${PATH}" PYTHONPATH="${PYTHONPATH:-}" PYTHONUSERBASE="${PYTHONUSERBASE}" "$@"